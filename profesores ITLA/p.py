import streamlit as st
import pandas as pd

# Crear bases de datos
profesores_data = {
    'Carrera': [
        'Desarrollo de Software', 'Desarrollo de Software', 'Desarrollo de Software',
        'Ciberseguridad', 'Ciberseguridad',
        'Inteligencia Artificial', 'Inteligencia Artificial',
        'Simulaciones Interactivas y Videojuegos', 'Simulaciones Interactivas y Videojuegos',
        'Telecomunicaciones', 'Telecomunicaciones',
        'Inform√°tica Forense', 'Inform√°tica Forense',
        'Energ√≠as Renovables', 'Energ√≠as Renovables',
        'Redes de Informaci√≥n', 'Redes de Informaci√≥n',
        'Mecatr√≥nica', 'Mecatr√≥nica',
        'Manufactura Automatizada', 'Manufactura Automatizada',
        'Multimedia', 'Multimedia',
        'Sonido', 'Sonido',
        'Anal√≠tica y Ciencia de los Datos', 'Anal√≠tica y Ciencia de los Datos',
        'Seguridad Inform√°tica', 'Seguridad Inform√°tica'
    ],
    'Asignatura': [
        'Bases de Datos 1', 'Bases de Datos 2', 'Programaci√≥n Avanzada',
        'Criptograf√≠a', 'Seguridad en Redes',
        'Redes Neuronales', 'Procesamiento de Lenguaje Natural',
        'Dise√±o de Videojuegos', 'Programaci√≥n de Simulaciones',
        'Redes de Datos', 'Comunicaciones √ìpticas',
        'Inform√°tica Forense 1', 'Recuperaci√≥n de Datos',
        'Energ√≠a Solar', 'Energ√≠a E√≥lica',
        'Administraci√≥n de Redes', 'Seguridad de Redes',
        'Rob√≥tica', 'Sistemas Mecatr√≥nicos',
        'Automatizaci√≥n Industrial', 'Control de Producci√≥n',
        'Dise√±o Gr√°fico', 'Producci√≥n Multimedia',
        'Ingenier√≠a de Sonido', 'T√©cnicas de Grabaci√≥n',
        'Miner√≠a de Datos', 'An√°lisis Predictivo',
        'Fundamentos de Seguridad', 'Hacking √âtico'
    ],
    'Nombre': [
        'Mar√≠a P√©rez', 'Juan G√≥mez', 'Ana Rodr√≠guez',
        'Carlos Ruiz', 'Laura S√°nchez',
        'Pedro Mart√≠nez', 'Sof√≠a D√≠az',
        'Luis Torres', 'Elena Rivas',
        'Fernando Soto', 'Patricia M√©ndez',
        'Andr√©s Castillo', 'Natalia Herrera',
        'Julio Morales', 'Carmen D√≠az',
        'Adri√°n Figueroa', 'Ver√≥nica Lara',
        'Eduardo Pe√±a', 'M√≥nica V√°squez',
        'Roberto Salazar', 'Daniela Campos',
        'Silvia Romero', 'Gabriel √Ålvarez',
        'Oscar Molina', 'Viviana Cruz',
        'Mauricio Le√≥n', 'Paula Rivera',
        'Ernesto Fuentes', 'Daniela Vega'
    ],
    'Ranking': [
        4.8, 4.5, 4.9,
        4.2, 4.7,
        4.3, 4.6,
        4.5, 4.6,
        4.4, 4.3,
        4.7, 4.6,
        4.2, 4.4,
        4.5, 4.3,
        4.6, 4.7,
        4.5, 4.4,
        4.6, 4.5,
        4.3, 4.4,
        4.7, 4.6,
        4.5, 4.4
    ]
}

# Datos adicionales - INGL√âS
asignaturas_ingles = ['Nivel 1-3', 'Nivel 4-6', 'Nivel 7-9', 'Nivel 10-12', 'Ingl√©s T√©cnico']
profesores_ingles = ['Lucas Gonz√°lez', 'Marina R√≠os', 'Andr√©s Rivas', 'Camila Pe√±a', 'Sebasti√°n Morales']
ranking_ingles = [4.3, 4.5, 4.2, 4.4, 4.6]

asignaturas_humanidades = ['Historia Universal', '√âtica Profesional', 'Filosof√≠a Moderna']
profesores_humanidades = ['Javier Soto', 'Ana Beltr√°n', 'Luis Fern√°ndez']
ranking_humanidades = [4.5, 4.4, 4.3]

# Crear DataFrames
df_tecnicos = pd.DataFrame(profesores_data)
df_ingles = pd.DataFrame({
    'Carrera': ['Ingl√©s'] * 5,
    'Asignatura': asignaturas_ingles,
    'Nombre': profesores_ingles,
    'Ranking': ranking_ingles
})
df_humanidades = pd.DataFrame({
    'Carrera': ['Humanidades'] * 3,
    'Asignatura': asignaturas_humanidades,
    'Nombre': profesores_humanidades,
    'Ranking': ranking_humanidades
})

# FUNCIONES

def preparar_tabla(df):
    df_ordenado = df.sort_values(by='Ranking', ascending=False).reset_index(drop=True)
    df_ordenado['Ranking'] = df_ordenado['Ranking'].round(1)

    medallas = []
    for ranking in df_ordenado['Ranking']:
        if ranking >= 4.8:
            medallas.append('ü•á Oro')
        elif 4.6 <= ranking < 4.8:
            medallas.append('ü•à Plata')
        elif 4.4 <= ranking < 4.6:
            medallas.append('ü•â Bronce')
        else:
            medallas.append('-')
    df_ordenado['Medalla'] = medallas
    return df_ordenado[['Carrera', 'Nombre', 'Asignatura', 'Ranking', 'Medalla']]

def aplicar_estilos(df):
    def estilo_medalla(val):
        if val == 'ü•á Oro':
            return 'background-color: gold; color: black; font-weight: bold'
        elif val == 'ü•à Plata':
            return 'background-color: silver; color: black; font-weight: bold'
        elif val == 'ü•â Bronce':
            return 'background-color: #cd7f32; color: white; font-weight: bold'
        else:
            return ''
    return df.style.applymap(estilo_medalla, subset=['Medalla'])

# INTERFAZ

st.title('üèÖ Ranking de Rendimiento Docente')

st.markdown("""
> Este ranking tiene como finalidad brindar a los estudiantes informaci√≥n confiable sobre los docentes m√°s destacados,
> ayud√°ndolos a elegir con mayor certeza a aquellos profesores que puedan contribuir a una mejor experiencia acad√©mica
> y un ambiente de aprendizaje m√°s positivo.
""")

# Sidebar
st.sidebar.header("Navegaci√≥n")
seccion = st.sidebar.radio('Seleccione una secci√≥n:', ['Seleccione una opci√≥n', 'T√©cnicos', 'Ingl√©s', 'Humanidades'])

# Mostrar tabla seg√∫n secci√≥n
if seccion == 'T√©cnicos':
    carrera_tecnica = st.sidebar.selectbox('Seleccione una carrera t√©cnica:', sorted(df_tecnicos['Carrera'].unique()))
    if carrera_tecnica:
        df_filtrado = df_tecnicos[df_tecnicos['Carrera'] == carrera_tecnica]

        asignaturas = sorted(df_filtrado['Asignatura'].unique())
        asignatura_tecnica = st.sidebar.selectbox('Seleccione una asignatura:', ['Todas'] + list(asignaturas))
        if asignatura_tecnica != 'Todas':
            df_filtrado = df_filtrado[df_filtrado['Asignatura'] == asignatura_tecnica]

        busqueda = st.sidebar.text_input('Buscar profesor por nombre')
        if busqueda:
            df_filtrado = df_filtrado[df_filtrado['Nombre'].str.contains(busqueda, case=False)]

        if not df_filtrado.empty:
            tabla = preparar_tabla(df_filtrado)
            st.dataframe(
                aplicar_estilos(tabla).format({'Ranking': '{:.1f}'})
            )

elif seccion == 'Ingl√©s':
    asignatura_ingles_sel = st.sidebar.selectbox('Seleccione un nivel de Ingl√©s:', ['Todas'] + asignaturas_ingles)
    busqueda = st.sidebar.text_input('Buscar profesor por nombre')

    df_filtrado = df_ingles
    if asignatura_ingles_sel != 'Todas':
        df_filtrado = df_filtrado[df_filtrado['Asignatura'] == asignatura_ingles_sel]
    if busqueda:
        df_filtrado = df_filtrado[df_filtrado['Nombre'].str.contains(busqueda, case=False)]

    if not df_filtrado.empty:
        tabla = preparar_tabla(df_filtrado)
        st.dataframe(
            aplicar_estilos(tabla).format({'Ranking': '{:.1f}'})
        )

elif seccion == 'Humanidades':
    asignatura_human_sel = st.sidebar.selectbox('Seleccione una asignatura de Humanidades:', ['Todas'] + asignaturas_humanidades)
    busqueda = st.sidebar.text_input('Buscar profesor por nombre')

    df_filtrado = df_humanidades
    if asignatura_human_sel != 'Todas':
        df_filtrado = df_filtrado[df_filtrado['Asignatura'] == asignatura_human_sel]
    if busqueda:
        df_filtrado = df_filtrado[df_filtrado['Nombre'].str.contains(busqueda, case=False)]

    if not df_filtrado.empty:
        tabla = preparar_tabla(df_filtrado)
        st.dataframe(
            aplicar_estilos(tabla).format({'Ranking': '{:.1f}'})
        )
